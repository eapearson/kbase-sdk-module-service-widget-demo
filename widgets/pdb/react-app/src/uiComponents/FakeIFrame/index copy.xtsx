
import { WindowChannel, WindowChannelInit } from "@kbase/ui-lib/lib/windowChannel";
import { Component } from "react";
import { v4 as uuidv4 } from 'uuid';
import { AsyncProcess, AsyncProcessStatus } from "../AsyncProcess";
import { NarrativeConfig } from "../Develop";
import { DevelopAuthentication, DevelopAuthStatus, DevelopUserAuthentication } from "../DevelopAuth";
import ErrorAlert from "../ErrorAlert";
import Loading from "../Loading";
import { SimpleError } from "../widgetSupport";
import View from "./View";


// Very much like AuthState, but meant to be used in the iframe params
export interface AuthParamBase {
    status: 'authenticated' | 'unauthenticated'
}

export interface AuthParamAuthenticated extends AuthParamBase {
    status: 'authenticated',
    authentication: DevelopUserAuthentication
}

export interface AuthParamUnauthenticated extends AuthParamBase {
    status: 'unauthenticated'
}

export type AuthParam = AuthParamAuthenticated | AuthParamUnauthenticated;

export interface IFrameParams {
    hostChannelId: string;
    appChannelId: string;
    channel: WindowChannel
}

export interface IFrameState {
    params: IFrameParams;
    resizeHeight: number | null;
}

export type IFrameProcessState = AsyncProcess<IFrameState, SimpleError>;

const APP_STARTUP_TIMEOUT = 1000;

// Messages

export interface StartedMessage {
    channelId: string; 
}

// Component

export interface ControllerProps {
    narrativeConfig: NarrativeConfig;
    authState: DevelopAuthentication
}

interface ControllerState {
    iframeState: IFrameProcessState;
}

export default class FakeIFrame extends Component<ControllerProps, ControllerState> {
    constructor(props: ControllerProps) {
        super(props);
        this.state = {
            iframeState: {
                status: AsyncProcessStatus.NONE
            }
        }
    }

    componentDidMount() {
        this.initializeIFrame();
    }

    async initializeIFrame() {

    }

    iframeLoaded(iframeWindow: HTMLIFrameElement) {
        // Left off here .. um, this isn't right.
        // THe channel ids have gotta be stamped already.
        const hostChannelId = uuidv4();
        const appChannelId = uuidv4();
        const chan = new WindowChannelInit({
            id: hostChannelId,
            window: iframeWindow.contentWindow || undefined,
            host: window.document.location.origin,
        });
        const channel = chan.makeChannel(appChannelId);
        channel.on('clicked', () => {
            window.document.body.click();
        });

        channel.on('click', () => {
            window.document.body.click();
        });

        channel.on('resized', ({width, height}) => {
            // if (this.autoResize) {
            const resizeHeight = Math.ceil(height);
            // console.log('resizing...', this.resizeHeight, this.toolbarHeight);
            const iframeState = this.state.iframeState;

            // This should always be true if we are here, but TS doesn't
            // know this. May need to refactor to ensure that we don't need
            // such a hack.
            if (iframeState.status === AsyncProcessStatus.SUCCESS) {
                this.setState({
                    iframeState: {
                        ...iframeState,
                        value: {
                            ...iframeState.value,
                            resizeHeight
                        }
                    }
                })
            }
        })

        channel.once('ready', 1000, async ({channelId}) => {
            channel.setPartner(channelId || appChannelId);

            const startMessage = {
                auth: {accountInfo: this.props.authState},
                config: this.props.narrativeConfig
            }

            channel.send('start', startMessage);
        });

        channel.once('started', 1000, (message: StartedMessage) => {
            // TODO: should have initial height, but
            // it is okay for now, so we default.
            this.setState({
                iframeState: {
                    status: AsyncProcessStatus.SUCCESS,
                    value: {
                        params: {
                            appChannelId, hostChannelId, channel
                        },
                        resizeHeight: 100
                    }
                }
            })
            console.log('started', message);
            // TODO: Remove the loading
        });

        channel.start();
    }

    makeAuthParam(): AuthParam {
        switch (this.props.authState.status) {
            case DevelopAuthStatus.AUTHENTICATED:
                return {
                    status: 'authenticated',
                    authentication: this.props.authState.authentication
                }
            case DevelopAuthStatus.UNAUTHENTICATED:
                return {
                    status: 'unauthenticated'
                }
        }
    }

    renderLoading() {
        return <Loading message="Setting up Narrative <-> iFrame Communication..." />
    }

    renderError(error: SimpleError) {
        return <ErrorAlert message={error.message} />
    }
    
    render() {
        switch (this.state.iframeState.status) {
            case AsyncProcessStatus.NONE:
            case AsyncProcessStatus.INITIALIZING:
                return this.renderLoading();
            case AsyncProcessStatus.ERROR:
                return this.renderError(this.state.iframeState.error);
            case AsyncProcessStatus.SUCCESS:
                return <View
                    hostChannelId={this.state.iframeState.value.params.hostChannelId}
                    appChannelId={this.state.iframeState.value.params.appChannelId}
                    height={this.state.iframeState.value.resizeHeight}
                />
            case AsyncProcessStatus.UPDATING:
        }
    }
}