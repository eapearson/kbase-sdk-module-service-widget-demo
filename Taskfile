#!/bin/bash

#
# PRIVATE
#

#
# _build-cra widget-name...
#
# Runs docker compose with the given docker compose filename suffix with the given command arguments
#
function _build-cra {
  NAME="${1}"
  # This is the build
  # The DIR variable is expected by the docker-compose.yml file
  # to determine which directory to mount as /app, which roots
  # the context for whatever we are doing.
  echo "Building Widget"
  export DIR="${PWD}/widgets/${NAME}/react-app"
  docker compose -f tools/node/docker-compose.yml run --rm node npm install
  docker compose -f tools/node/docker-compose.yml run --rm node npm run build
  # This is the copy
  echo "Copying Widget..."
  rm -rf "build/widgets/${NAME}"
  cp -pr "${DIR}/build" "build/widgets/${NAME}"
  echo "Done"
}

function _shell-cra {
  NAME="${1}"
  # Shell into a node container with the provided directory mounted at /app and port :3000 exposed.
  # This allows an interactive node session?
  echo "Shelling in ..."
  export DIR="${PWD}/widgets/${NAME}/react-app"
  docker compose -f tools/node/docker-compose.yml run --rm --service-ports --entrypoint bash  node

}

#
# _dc-run name command...
#
# Runs docker compose with the given docker compose filename suffix with the given command arguments
#
function _dc-run {
  docker compose -f "etc/docker-compose-${1}.yml" --project-directory "${PWD}" --project-name servicewidgetdemo run --rm  --entrypoint scripts/dev/entrypoint.sh servicewidgetdemo "${@:2}"
}

function _dc-up {
  docker compose -f "etc/docker-compose-${1}.yml" --project-directory "${PWD}" --project-name servicewidgetdemo up
}

function _node-run {
  docker compose -f "tools/node/docker-compose.yml" --project-directory "${PWD}"
}

#
# COMMANDS
#

function mypy {
  _dc-run runner scripts/dev/run-mypy.sh
}

function black {
  _dc-run runner scripts/dev/run-black.sh "${1}" "${2}"
}

function git-info {
  mkdir -p deploy
  _dc-run runner poetry run python src/misc/git-info.py
}

function render-config {
  mkdir -p deploy
  _dc-run runner scripts/deploy/render-config.sh
}

#
# Generates the openapi spec in memory, and compares it to the one already existing in docs/api/openapi.json.
# Returns a success if identical, error (1) if there are any differences.
#
function check-openapi {
  _dc-run runner poetry run python src/misc/check-openapi.py
}

#
# Generates the openapi.json spec file at docs/api/openapi.json
#
function generate-openapi {
  _dc-run runner poetry run python src/misc/generate-openapi.py
}

#
# Generates markdown + html api docs from a given openapi.json spec file, placing the resulting document
# at docs/api/index.md. A development-time preview which utilizes an approximation of GitHub styles, is
# also generated at docs/api/index.html.
#
function generate-docs {
  rm -rf docs/api/openapi/*
  _dc-run runner poetry run python src/misc/generate-docs.py
}

function shell {
  _dc-run runner bash
}

function server {
  docker compose -f etc/docker-compose-prod-like.yml
}

#
# For generating a config to be used
# Environment variables are filled with either test
#
function render-config-dev {
  export KBASE_ENDPOINT=https://ci.kbase.us/services/
  _dc-run runner scripts/deploy/render-config.sh
}

function test {
  # Testing only touches locally controlled services, either mock
  # mock (kbase auth, orcid) or locally running (mongodb), so
  # all such values are controlled within the test environment.
  _dc-run testing scripts/dev/run-tests.sh "${1}"
}

function dev-server {
  export KBASE_ENDPOINT="${KBASE_ENDPOINT:-https://ci.kbase.us/services/}"
  _dc-up dev
}

function run-server {
  export KBASE_ENDPOINT="${KBASE_ENDPOINT:-https://ci.kbase.us/services/}"
  _dc-up prod-like
  # docker compose -f etc/docker-compose-prod-like.yml up
}

# For building a prod-like image locally
function build-server {
  docker build -t kbase/servicewidgetdemo:dev .
}

# Widgets
# Each app should have a build-AAA function, where AAA is the app name.
# The build function is responsible for preparing the codebase, creating
# the final runnable product, and installing in build/widgets/AAA, with the SPA
# entrypoint at build/widgets/AAA/index.html.
# The deploy phase, essentially just building the image, will relocate the builds
# to /kb/module/widgets/AAA.
# A function may implement the enter build process, or it may invoke a script, which 
# should be located in scripts/widgets

function build-status-widget {
  mkdir -p build/widgets
  rm -rf build/widgets/status
  cp -pr widgets/status build/widgets/status
}

function build-workspace-status-widget {
  _build-cra "workspace-status"
}

function build-pdb-widget {
  _build-cra "pdb"
}


function develop-pdb-widget {
  _shell-cra "pdb"
}


function build-pdbinfo-widget {
  _build-cra "pdbinfo"
}


function develop-pdbinfo-widget {
  _shell-cra "pdbinfo"
}



#
# This was the first attempt at generating API docs, but was not suitable for generation of
# docs which could be viewed at GitHub. Left here for posterity, and because maybe we can get
# it to work better.
#
#function generate-apidocs {
#    rm -rf docs/api/openapi/*
#    docker run --rm \
#      -v "${PWD}:/kb/module" openapitools/openapi-generator-cli generate \
#      -i /kb/module/docs/api/openapi.json \
#      -g markdown \
#      -o /kb/module/docs/api/openapi
#}

# For running a prod-like image locally
function image {
  # NB There should be a mongo db running at the indicated
  # host and port with the indicated auth
  docker run \
    -e KBASE_ENDPOINT=https://ci.kbase.us/services/ \
    --pull always \
    --stop-signal SIGINT \
    --dns 8.8.8.8 \
    --network kbase-dev \
    --name servicewidgetdemo \
    --hostname servicewidgetdemo \
    --rm \
    "${1:-kbase/servicewidgetdemo:dev}"
}

function help {
    echo "$0 <task> <args>"
    echo "Runs the tasks listed below."
    echo "To find out more about them, either read the source"
    echo "for ${0} or the docs located in 'docs/tasks.md'."
    echo "Tasks:"
    # Note that this omits private functions - those prefixed with an _
    compgen -A function | grep -e '^[^_]' | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time "${@:-help}"
